if (app.documents.length != 0) {       var myDoc = app.activeDocument;       myDoc.save();     MakeJPEGfile();       Upload();}  function MakeJPEGfile() {        for(var myCounter = 0; myCounter < myDoc.pages.length; myCounter++) {                        app.jpegExportPreferences.jpegQuality = JPEGOptionsQuality.medium; // low medium high maximum            app.jpegExportPreferences.exportResolution = 200;            app.jpegExportPreferences.jpegExportRange = ExportRangeOrAllPages.exportRange;            app.jpegExportPreferences.pageString = myDoc.pages.item(myCounter).name;                         var myFilePath = Folder(myDoc.filePath) + "/" + GetFileNameOnly(myDoc.name)  + "_" + myCounter + ".jpg";            var myFile = new File(myFilePath);            myDoc.exportFile(ExportFormat.jpg, myFile, false);       }  }  // get only the file namefunction GetFileNameOnly(myFileName) {       var myString = "";       var myResult = myFileName.lastIndexOf(".");       if (myResult == -1) {            myString = myFileName;       }       else {            myString = myFileName.substr(0, myResult);       }       return myString;      }  // override existing files with the same namefunction Upload() {                 var uploadsFolder = '/Volumes/webdav/uploads';        var myFolder = Folder(myDoc.filePath);        //copyFolder(new Folder("C:/Source Folder"), new Folder("C:/Destination Folder"));          copyFolder (new Folder(myFolder),  new Folder(uploadsFolder));        }   //copy folder recursive function copyFolder(sourceFolder, destinationFolder) {      var sourceChildrenArr = sourceFolder.getFiles();      for (var i = 0; i < sourceChildrenArr.length; i++) {          var sourceChild = sourceChildrenArr[i];          var destinationChildStr = destinationFolder.fsName + "/" + sourceChild.name;          if (sourceChild instanceof File) {              copyFile(sourceChild, new File(destinationChildStr));          }          else {              copyFolder(sourceChild, new Folder(destinationChildStr));              // not in our case        }      }  }               // copy a filefunction copyFile(sourceFile, destinationFile) {      createFolder(destinationFile.parent);      sourceFile.copy(destinationFile);  }               // create a folder     function createFolder(folder) {      if (folder.parent !== null && !folder.parent.exists) {          createFolder(folder.parent);      }      folder.create();  }    